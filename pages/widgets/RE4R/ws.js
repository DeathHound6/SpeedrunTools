import { useState, useEffect, useCallback } from "react";
import Head from 'next/head';
import { ErrorPage, GameErrorPage } from "components/Errors";
import HealthBar from "components/HealthBar";
import { TextBlock, TextBlocks } from "components/TextBlock";

const websocket_endpoint = "wss://relay.aricodes.net/ws"; // 'ws://localhost:19906';

const Asc = (a, b) => {
    if (a > b) return +1;
    if (a < b) return -1;
    return 0;
};

const Desc = (a, b) => {
    if (a > b) return -1;
    if (a < b) return +1;
    return 0;
};

const RE4RWS = () => {
    const [data, setData] = useState(null);
    const [connected, setConnected] = useState(false);
    const [token, setToken] = useState(null);

    const handleConnect = useCallback(() => {
        const appendData = d => {
            if (d === null) return;
            setData(d);
            if (process.env.NODE_ENV !== 'production') console.log("Websocket Data: ", d);
        };

        const socket = new WebSocket(websocket_endpoint);
        socket.onopen = () => {
            socket.send(`listen:${token}`);
            setConnected(true);
        };
        socket.onclose = () => {
            setConnected(false);
        };
        socket.onmessage = event => appendData(JSON.parse(event.data));
    }, [token, setConnected, setData]);

    useEffect(() => {
        handleConnect();
    }, [handleConnect]);

    function GetColor(state) {
        if (state == "Gassed") return ["bg-rose-900", "text-rose-300"];
        if (state == "Poisoned") return ["bg-indigo-900", "text-indigo-300"];
        if (state == "Fine") return ["bg-green-800", "text-green-300"];
        if (state == "FineToo") return ["bg-green-900", "text-green-300"];
        if (state == "Caution") return ["bg-yellow-800", "text-yellow-300"];
        return ["bg-red-900", "text-red-300"];
    }

    const promptToken = () => {
        const tkn = prompt("Enter custom api token:");
        if (tkn.length > 0) setToken(tkn);
        else {
            alert("You must provide a token to api.");
            promptToken();
        }
    }

    if (token === null) promptToken();
    if (!connected) return <ErrorPage background="bg-re" connected={connected} callback={handleConnect} />;
    if (data.GameName !== "RE4R") return <GameErrorPage background="bg-re" callback={handleConnect} />;

    const { PlayerHealth, Rank, GameStatsKillCountElement, EnemyHealth, IGTFormattedString } = data;
    const { CurrentHitPoint, DefaultHitPoint, Percentage, CurrentHealthState } = PlayerHealth;
    const { Rank: _Rank, ActionPoint, ItemPoint } = Rank;
    const { Count } = GameStatsKillCountElement;

    const filterdEnemies = EnemyHealth.filter(m => { return (m.IsAlive) }).sort(function (a, b) {
        return Asc(a.CurrentHitPoint, b.CurrentHitPoint) || Desc(a.CurrentHitPoint, b.CurrentHitPoint);
    });

    return (
        <>
            <Head>
                <title>Stat Tracker | RE4R</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="absolute w-full h-full flex">
                <TextBlock label="IGT" val={IGTFormattedString} colors={["text-white", "text-green-500"]} hideParam={false} />
                <HealthBar current={CurrentHitPoint} max={DefaultHitPoint} percent={Percentage} label="Leon" colors={GetColor(CurrentHealthState)} />
                <TextBlocks labels={["Rank", "ActionPoint", "ItemPoint", "Kills"]} vals={[_Rank, ActionPoint, ItemPoint, Count]} colors={["text-white", "text-green-500"]} hideParam={false} />
                {filterdEnemies.map((enemy, idx) => (
                    <HealthBar key={`enemy${idx}`} current={enemy.CurrentHitPoint} max={enemy.DefaultHitPoint} percent={enemy.Percentage} label="" colors={["bg-red-900", "text-red-500"]} />
                ))}
            </div>
        </>
    );
}

export default RE4RWS;