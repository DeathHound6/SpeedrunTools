import { useState, useEffect, useCallback } from "react";
import Head from 'next/head';
import HealthBar from "components/HealthBar";
import { TextBlock, TextBlocks } from "components/TextBlock";

//LOCAL JSON SERVER SETTINGS
var JSON_ADDRESS = "127.0.0.1";
const JSON_PORT = 7190;
const POLLING_RATE = 333;
var JSON_ENDPOINT = `http://${JSON_ADDRESS}:${JSON_PORT}/`;

const Asc = (a, b) => {
    if (a > b) return +1;
    if (a < b) return -1;
    return 0;
};

const Desc = (a, b) => {
    if (a > b) return -1;
    if (a < b) return +1;
    return 0;
};

const RE2RJSON = () => {
    const [data, setData] = useState(null);
    const [connected, setConnected] = useState(false);

    const appendData = d => {
        if (d === null) return;
        setData(d);
        if (process.env.NODE_ENV !== 'production') console.log("JSON Data: ", d);
    };

    const handleConnect = useCallback(() => {
        const getData = () => {
            fetch(JSON_ENDPOINT)
                .then(function (response) {
                    return response.json();
                })
                .then(function (data) {
                    setConnected(true);
                    appendData(data);
                })
                .catch(function (err) {
                    console.log("Error: " + err);
                    setConnected(false);
                });
        };
        if (!connected) getData();
        if (connected) setInterval(getData, POLLING_RATE);
    }, [connected]);

    useEffect(() => {
        handleConnect();
    }, [handleConnect]);

    function GetColor(state) {
        if (state == "Gassed") return ["bg-rose-900", "text-rose-300"];
        if (state == "Poisoned") return ["bg-indigo-900", "text-indigo-300"];
        if (state == "Fine") return ["bg-green-800", "text-green-300"];
        if (state == "FineToo") return ["bg-green-900", "text-green-300"];
        if (state == "Caution") return ["bg-yellow-800", "text-yellow-300"];
        return ["bg-red-900", "text-red-300"];
    }

    if (!connected) return <div>No Game Detected</div>;
    if (data.GameName !== "RE2R") return <div>Incorrect Game Detected: {data.GameName}</div>;

    const { Player, PlayerName, RankManager, EnemyHealth, IGTFormattedString } = data;
    const { CurrentHP, MaxHP, Percentage, CurrentHealthState } = Player;
    const { Rank, RankScore } = RankManager;

    const filterdEnemies = EnemyHealth.filter(m => { return (m.IsAlive) }).sort(function (a, b) {
        return Asc(a.CurrentHP, b.CurrentHP) || Desc(a.CurrentHP, b.CurrentHP);
    });

    return (
        <>
            <Head>
                <title>Stat Tracker | RE2R</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="absolute w-full h-full flex flex-col p-4 gap-2">
                <TextBlock label="IGT" val={IGTFormattedString} colors={["text-white", "text-green-500"]} hideParam={false} />
                <HealthBar current={CurrentHP} max={MaxHP} percent={Percentage} label={PlayerName} colors={GetColor(CurrentHealthState)} />
                <TextBlocks labels={["Rank", "RankScore"]} vals={[Rank, RankScore]} colors={["text-white", "text-green-500"]} hideParam={false} />
                {filterdEnemies.map((enemy, idx) => (
                    <HealthBar key={`enemy${idx}`} current={enemy.CurrentHP} max={enemy.MaxHP} percent={enemy.Percentage} label="" colors={["bg-red-900", "text-red-500"]} />
                ))}
            </div>
        </>
    );
}

export default RE2RJSON;